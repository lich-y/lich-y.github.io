<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python常用代码</title>
      <link href="/2020/07/02/python%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
      <url>/2020/07/02/python%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、重复元素判定"><a href="#一、重复元素判定" class="headerlink" title="一、重复元素判定"></a>一、重复元素判定</h2><p>以下方法可以检查给定列表是否存在重复元素。其中使用set()函数来移除所有重复元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_unique</span>(<span class="params">list_data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(list_data)== <span class="built_in">len</span>(<span class="built_in">set</span>(list_data))</span><br></pre></td></tr></table></figure><h2 id="二、字符元素组成判定"><a href="#二、字符元素组成判定" class="headerlink" title="二、字符元素组成判定"></a>二、字符元素组成判定</h2><p>检查两个字符串的组成元素是否一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">anagram</span>(<span class="params">first, second</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Counter(first)==Counter(second)</span><br></pre></td></tr></table></figure><h2 id="三、内存占用"><a href="#三、内存占用" class="headerlink" title="三、内存占用"></a>三、内存占用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">variable = <span class="number">30</span></span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(variable))</span><br></pre></td></tr></table></figure><h2 id="四、字节占用"><a href="#四、字节占用" class="headerlink" title="四、字节占用"></a>四、字节占用</h2><p>检查字符串占用的字节数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byte_size</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(string.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="五、大写第一个字母"><a href="#五、大写第一个字母" class="headerlink" title="五、大写第一个字母"></a>五、大写第一个字母</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;programming is awesome&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.title())</span><br></pre></td></tr></table></figure><h2 id="六、分块"><a href="#六、分块" class="headerlink" title="六、分块"></a>六、分块</h2><p>给定具体大小，定义一个函数以按照这个大小切割列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chunk</span>(<span class="params">lst,size</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: lst[x*size:x*size + size],<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>,ceil(<span class="built_in">len</span>(lst)/size)))))</span><br></pre></td></tr></table></figure><h2 id="七、压缩"><a href="#七、压缩" class="headerlink" title="七、压缩"></a>七、压缩</h2><p>这个方法可以将布尔型的值去掉，例如(False,None,0,””),它使用了filter()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compact</span>(<span class="params">lst</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="built_in">bool</span>, lst))</span><br></pre></td></tr></table></figure><h2 id="八、解包"><a href="#八、解包" class="headerlink" title="八、解包"></a>八、解包</h2><p>如下代码段可以将打包好的成对列表解开成两组不同的元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array = [[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>], [<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>],[<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]]</span><br><span class="line">transposed = <span class="built_in">zip</span>(*array)</span><br><span class="line"><span class="built_in">print</span>(transposed)</span><br></pre></td></tr></table></figure><h2 id="九、链式对比"><a href="#九、链式对比" class="headerlink" title="九、链式对比"></a>九、链式对比</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> &lt; a &lt; <span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> ==a &lt; <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="十、逗号连接"><a href="#十、逗号连接" class="headerlink" title="十、逗号连接"></a>十、逗号连接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hobbies = [<span class="string">&quot;basketball&quot;</span>, <span class="string">&quot;football&quot;</span>, <span class="string">&quot;swimming&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My hobbies are: &quot;</span>+<span class="string">&quot;,&quot;</span>.join(hobbies))</span><br></pre></td></tr></table></figure><h2 id="十一、元音统计"><a href="#十一、元音统计" class="headerlink" title="十一、元音统计"></a>十一、元音统计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_vowels</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(<span class="built_in">len</span>(re.findall(<span class="string">r&#x27;[aeiou]&#x27;</span>, <span class="built_in">str</span>, re.IGNORECASE)))</span><br><span class="line">count_vowels(<span class="string">&#x27;foobar&#x27;</span>)</span><br><span class="line">count_vowels(<span class="string">&#x27;gym&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="十二、首字母小写"><a href="#十二、首字母小写" class="headerlink" title="十二、首字母小写"></a>十二、首字母小写</h2><p>如下方法将令给定字符串的第一个字符统一为小写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decapitalize</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>[:<span class="number">1</span>].lower() + <span class="built_in">str</span>[<span class="number">1</span>:]</span><br><span class="line">decapitalize(<span class="string">&#x27;FooBar&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="十三、展开列表"><a href="#十三、展开列表" class="headerlink" title="十三、展开列表"></a>十三、展开列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spread</span>(<span class="params">arg</span>):</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(i, <span class="built_in">list</span>):</span><br><span class="line">            ret.extend(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret.append(i)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deep_flatten</span>(<span class="params">lst</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    result.extend(spread(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: deep_flatten(x) <span class="keyword">if</span> <span class="built_in">type</span>(x) ==<span class="built_in">list</span> <span class="keyword">else</span> x, lst))))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">deep_flatten([<span class="number">1</span>,[<span class="number">2</span>],[[<span class="number">3</span>],<span class="number">4</span>],<span class="number">5</span>])</span><br></pre></td></tr></table></figure><h2 id="十四、列表的差"><a href="#十四、列表的差" class="headerlink" title="十四、列表的差"></a>十四、列表的差</h2><p>该方法将返回第一个列表的元素，其不在第二个列表内。如果同时要反馈第二个列表独有的元素，还需要加一句set_b.difference(set_a)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">difference</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    set_a = <span class="built_in">set</span>(a)</span><br><span class="line">    set_b = <span class="built_in">set</span>(b)</span><br><span class="line">    comparison = set_a.difference(set_b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(comparison)</span><br><span class="line">difference([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><h2 id="十五、通过函数取差"><a href="#十五、通过函数取差" class="headerlink" title="十五、通过函数取差"></a>十五、通过函数取差</h2><p>如下方法首先会应用一个给定的函数，然后再返回应用函数后结果有差别的列表元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">difference_by</span>(<span class="params">a,b,fn</span>):</span></span><br><span class="line">    b = <span class="built_in">set</span>(<span class="built_in">map</span>(fn, b))</span><br><span class="line">    <span class="keyword">return</span> [item <span class="keyword">for</span> item <span class="keyword">in</span> a <span class="keyword">if</span> fn(item) <span class="keyword">not</span> <span class="keyword">in</span> b]</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> floor</span><br><span class="line">difference_by([<span class="number">2.1</span>, <span class="number">1.2</span>], [<span class="number">2.3</span>, <span class="number">3.4</span>], floor)</span><br></pre></td></tr></table></figure><h2 id="十六、链式函数调用"><a href="#十六、链式函数调用" class="headerlink" title="十六、链式函数调用"></a>十六、链式函数调用</h2><p>你可以在一行代码内调用多个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">a, b= <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>((subtract <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> add)(a, b))</span><br></pre></td></tr></table></figure><h2 id="十七、检查重复项"><a href="#十七、检查重复项" class="headerlink" title="十七、检查重复项"></a>十七、检查重复项</h2><p>如下代码将检查两个列表是不是有重复项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_duplicates</span>(<span class="params">lst</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(lst) != <span class="built_in">len</span>(<span class="built_in">set</span>(lst))</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>]</span><br><span class="line">y = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">has_duplicates(x)</span><br><span class="line">has_duplicates(y)</span><br></pre></td></tr></table></figure><h2 id="十八、合并两个字典"><a href="#十八、合并两个字典" class="headerlink" title="十八、合并两个字典"></a>十八、合并两个字典</h2><blockquote><p>python2:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def merge_two_dicts(a,b):</span><br><span class="line">c = a.copy()</span><br><span class="line">c.update(b)</span><br><span class="line">return c</span><br><span class="line">a=&#123;&#x27;x&#x27;:1,&#x27;y&#x27;:2&#125;</span><br><span class="line">b=&#123;&#x27;y&#x27;:3,&#x27;z&#x27;:4&#125;</span><br><span class="line">print(merge_two_dicts(a,b))</span><br></pre></td></tr></table></figure><blockquote><p>python3</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def merge_dictionaries(a, b):</span><br><span class="line">return &#123;**a, **b&#125;</span><br><span class="line">a = &#123;&#x27;x&#x27;:1, &#x27;y&#x27;:2&#125;</span><br><span class="line">b = &#123;&#x27;y&#x27;:3, &#x27;z&#x27;:4&#125;</span><br><span class="line">print(merge_dictionaries(a, b))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>alternatives使用详解</title>
      <link href="/2020/06/08/alternatives%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/06/08/alternatives%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="alternatives介绍"><a href="#alternatives介绍" class="headerlink" title="alternatives介绍"></a>alternatives介绍</h2><p>alternatives 翻译过来是可供选择的事物。在Linux系统中，alternatives常用于控制同一个系统中同一软件的多个版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@lichy ~]# alternatives </span><br><span class="line">alternatives version 1.7.4 - Copyright (C) 2001 Red Hat, Inc.</span><br><span class="line">This may be freely redistributed under the terms of the GNU Public License.</span><br><span class="line"></span><br><span class="line">usage: alternatives --install &lt;link&gt; &lt;name&gt; &lt;path&gt; &lt;priority&gt;</span><br><span class="line">                    [--initscript &lt;service&gt;]</span><br><span class="line">                    [--family &lt;family&gt;]</span><br><span class="line">                    [--slave &lt;link&gt; &lt;name&gt; &lt;path&gt;]*</span><br><span class="line">       alternatives --remove &lt;name&gt; &lt;path&gt;</span><br><span class="line">       alternatives --auto &lt;name&gt;</span><br><span class="line">       alternatives --config &lt;name&gt;</span><br><span class="line">       alternatives --display &lt;name&gt;</span><br><span class="line">       alternatives --set &lt;name&gt; &lt;path&gt;</span><br><span class="line">       alternatives --list</span><br><span class="line"></span><br><span class="line">common options: --verbose --test --help --usage --version --keep-missing</span><br><span class="line">                --altdir &lt;directory&gt; --admindir &lt;directory&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><p>alternatives –install <link> <name> <path> <priority></p><p>install 表示向alternatives注册服务名</p><p>link  符号链接，注册最终地址，成功后会把命令在这个固定的目的地址做真实的软链，以后管理就是管理这个软链。</p><p>name  服务名称，以后管理时以它为关联依据</p><p>path    被管理的命令的绝对路径</p><p>priority    优先级，数字越大优先级越高</p></blockquote><p>实战：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# alternatives --install /usr/bin/python python /usr/bin/python2 1</span><br><span class="line">[root@localhost ~]# alternatives --install /usr/bin/python python /usr/bin/python2.7 2</span><br><span class="line">[root@localhost ~]# alternatives --install /usr/bin/python python /usr/bin/python 3</span><br><span class="line">[root@localhost ~]# alternatives --config python</span><br><span class="line"></span><br><span class="line">There are 3 programs which provide &#x27;python&#x27;.</span><br><span class="line"></span><br><span class="line">  Selection    Command</span><br><span class="line">-----------------------------------------------</span><br><span class="line"> + 1           /usr/bin/python2</span><br><span class="line">   2           /usr/bin/python2.7</span><br><span class="line">*  3           /usr/bin/python</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# alternatives --display python</span><br><span class="line">python - status is manual.</span><br><span class="line"> link currently points to /usr/bin/python2.7</span><br><span class="line">/usr/bin/python2 - priority 1</span><br><span class="line">/usr/bin/python2.7 - priority 2</span><br><span class="line">/usr/bin/python - priority 3</span><br><span class="line">Current `best&#x27; version is /usr/bin/python.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql物理备份工具XtraBackup</title>
      <link href="/2020/06/03/mysql%E7%89%A9%E7%90%86%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7XtraBackup/"/>
      <url>/2020/06/03/mysql%E7%89%A9%E7%90%86%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7XtraBackup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在实际的生产环境中，经常会使用第三方服务软件工具来实现数据库的数据备份与恢复。这次介绍使用XtraBackup实现数据库的备份与恢复。</p><h2 id="什么是XtraBackup"><a href="#什么是XtraBackup" class="headerlink" title="什么是XtraBackup"></a>什么是XtraBackup</h2><p>​    MySQL冷备、mysqldump、MySQL热拷贝都无法实现对数据库进行增量备份。在实际生产环境中增量备份是非常实用的，如果数据大于50G或100G，存储空间足够的情况下，可以每天进行完整备份，如果每天产生的数据量较大，需要定制数据备份策略。例如每周实用完整备份，周一到周六实用增量备份。而Percona-Xtrabackup就是为了实现增量备份而出现的一款主流备份工具，xtrabackup有2个工具，分别是xtrabackup、innobackupex。</p><p>​    Percona-xtrabackup是 Percona公司开发的一个用于MySQL数据库物理热备的备份工具，支持MySQL、Percona server和MariaDB，支持对InnoDB、XtraDB和HailDB存储引擎的在线完全非阻塞备份，开源免费，是目前较为受欢迎的主流备份工具。</p><p>Mysql自带的mysqldump备份方式采用的是逻辑备份，其中最大的缺陷是备份和恢复的速度比较慢，一旦数据库数据量比较大时，就不太适合mysqldump这种备份方式了。（例如数据量超过50GB）</p><p>XtraBackup安装完成后会生成4个可执行文件，其中两个比较重要的备份工具就是innobackupex和xtrabackup。各个执行文件的作用说明如下：</p><ol><li>xtrabackup是专门用来备份InnoDB表的，和Mysql Server没有交互。xtrabackup只能备份innoDB和xtraDB两种数据引擎的表，而不能备份MyISAM数据表。</li><li>innobackupex是一个封装了xtrabackup的Perl脚本，支持同时备份innodb和myisam，但在对myisam备份时需要加一个全局的读锁。还有就是myisam不支持增量备份。</li><li>xbcrypt是加密解密备份工具。</li><li>xbstream是流式打包传输工具，类似于tar命令的功能。</li></ol><h2 id="XtraBackup的特点"><a href="#XtraBackup的特点" class="headerlink" title="XtraBackup的特点"></a>XtraBackup的特点</h2><p>XtraBackup是由C语言编写，具有以下特点：</p><ol><li>备份速度快，物理备份可靠</li><li>支持全量、增量、部分备份</li><li>备份过程中不会中断正在执行的事务（无须锁表）</li><li>能够基于压缩等功能节约磁盘空间和流量</li><li>自动备份校验</li><li>还原和恢复数据速度快</li><li>可以进行流式备份并传输到另一台机器上</li><li>可以在不增加服务器负载的情况下备份数据</li></ol><h2 id="XtraBackup的备份过程"><a href="#XtraBackup的备份过程" class="headerlink" title="XtraBackup的备份过程"></a>XtraBackup的备份过程</h2><ol><li>innobackupex在启动后，会先fork一个进程，然后启动xtrabackup_log后台实时监测进程来监控MySQL redo的变化，一旦发现有新日志写入，立即将日志写入日志文件xtrabackup_log中。</li><li>复制数据库的数据文件和系统表空间文件到指定的备份目录。</li><li>复制完成后，执行flush tables with read lock操作。</li><li>复制.frm 、.myd、.myi文件。</li><li>获取到binary log位置点后，就会停止redo的复制线程，然后通知innobackupex redo log复制完成。</li><li>innobackupex收到redo备份完成的通知后，执行unlock tables操作。</li><li>进程进入释放资源、写备份元数据的状态，最终停止进程退出。</li></ol><h2 id="XtraBackup的增量备份"><a href="#XtraBackup的增量备份" class="headerlink" title="XtraBackup的增量备份"></a>XtraBackup的增量备份</h2><p>XtraBackup的增量备份只能针对InnoDB存储引擎。InnoDB每个page都有一个LSN号，且LSN号是全局递增的，表空间的page中LSN号越大，说明数据越新。每完成一次备份后，会记录当前备份到的LSN号到xtrabackup_checkpoints文件中，执行增量备份时，会比较当前点的LSN号是否大于上次备份的LSN号，若大于则备份。需要注意的是，第一次增量备份是基于上一次的全量备份，第二次增量备份时基于上一次的增量备份。也就是我们通俗意义上的差异性增量备份。</p><p>XtraBackup增量备份的优点如下：</p><ol><li>如果数据库太大，没有足够空间进行全量备份，则增量备份能有效节省空间。</li><li>支持热备份，备份过程不锁表（针对InnoDB而言），不阻塞数据库的读写</li><li>每日备份只产生少量数据，也可采用远程备份，节省本地空间。</li><li>备份恢复基于文件操作，降低直接对数据库操作的风险</li><li>备份效率和恢复效率更高。</li></ol><h2 id="XtraBackup的恢复"><a href="#XtraBackup的恢复" class="headerlink" title="XtraBackup的恢复"></a>XtraBackup的恢复</h2><p>XtraBackup的恢复理解起来相对简单，原理是将XtraBackup日志文件xtrabackup_log进行回放，然后将提交的事务信息及变更应用到数据库或表空间中，同时回滚未提交的事务，最终实现数据的一致。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql恢复操作</title>
      <link href="/2020/06/03/mysql%E6%81%A2%E5%A4%8D%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/06/03/mysql%E6%81%A2%E5%A4%8D%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Mysql数据库的恢复"><a href="#Mysql数据库的恢复" class="headerlink" title="Mysql数据库的恢复"></a>Mysql数据库的恢复</h2><p>对于Mysql数据库的恢复，除了使用第三方软件工具外，一般也使用source命令或者MySQL命令进行恢复操作。</p><h3 id="1-使用source命令"><a href="#1-使用source命令" class="headerlink" title="1. 使用source命令"></a>1. 使用source命令</h3><p>​    使用source命令恢复，首先需要正常登陆数据库，然后通过命令进行恢复操作。具体命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test_db;</span><br><span class="line">mysql&gt; source /backup/test_db_table1_2020-06-03.sql</span><br></pre></td></tr></table></figure><p>如果是压缩备份文件，需要在恢复之前先将其解压缩，然后再进入数据库使用命令恢复。</p><h3 id="2-使用Mysql命令"><a href="#2-使用Mysql命令" class="headerlink" title="2. 使用Mysql命令"></a>2. 使用Mysql命令</h3><p>MySQL命令恢复，也成为非交互式恢复数据库，无须登陆数据库就可以执行恢复操作。详情如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p &lt;/backup/all_bak_2020-06-03.sql</span><br></pre></td></tr></table></figure><p>Mysql数据库的恢复非常简单，操作也容易。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql备份操作</title>
      <link href="/2020/06/03/mysql%E5%A4%87%E4%BB%BD%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/06/03/mysql%E5%A4%87%E4%BB%BD%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据库备份概述"><a href="#数据库备份概述" class="headerlink" title="数据库备份概述"></a>数据库备份概述</h1><p>​    在生产环境中，对于任何一个公司来说，数据都是至关重要的，因此数据库的备份和恢复也是尤为重要的。在Mysql中，数据库的增量备份是备份数据库的二进制日志文件，二进制日志文件记录的是对数据库更新操作的SQL语句，不包括查询操作。二进制日志文件的产生需要在配置文件中开启，配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin = /usr/local/mysql/data/mysql-bin</span><br></pre></td></tr></table></figure><p>​    当对数据库表更新和插入数据时，手动刷新binlog日志时会产生新的二进制日志文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush logs;</span><br></pre></td></tr></table></figure><h1 id="数据库备份方法"><a href="#数据库备份方法" class="headerlink" title="数据库备份方法"></a>数据库备份方法</h1><ol><li><p><strong>物理备份</strong></p><p>物理备份指的是使用相关的复制命令直接把数据库的数据目录中的数据文件给复制一份或形成多副本。这种备份方法的缺点是在复制数据目录的过程中，数据库仍然有数据写入，因此可能会造成一部分数据的丢失。在数据库需要进行停机迁移的时候，可以直接使用物理备份</p></li><li><p><strong>逻辑备份</strong></p><p>逻辑备份时使用Mysql服务自带的mysqldump命令把需要的数据以SQL语句的形式存储。在恢复数据库时，使用MySQL恢复命令可以将sql语句重新在数据库执行一次。</p></li></ol><h1 id="Mysql数据库备份操作"><a href="#Mysql数据库备份操作" class="headerlink" title="Mysql数据库备份操作"></a>Mysql数据库备份操作</h1><h2 id="库备份"><a href="#库备份" class="headerlink" title="库备份"></a>库备份</h2><h3 id="单库备份"><a href="#单库备份" class="headerlink" title="单库备份"></a>单库备份</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p --databases test_db &gt; /backup/test_db_bak_$(date +%F).sql</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egrep -v &quot;^--|\*|^$&quot; /backup/test_db_bak_2020-06-02.sql #备份文件内容过滤不必要的输出</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 在恢复上述备份文件的时候必须先创建好新库，否则无法恢复数据，因为上述备份中没有建库语句。<strong>解决方法</strong>是执行备份操作时加上“**-B**”参数，备份命令可以修改为如下:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p -B --databases test_db &gt; /backup/test_db_bak_$(date +%F).sql</span><br></pre></td></tr></table></figure><h3 id="多库备份"><a href="#多库备份" class="headerlink" title="多库备份"></a>多库备份</h3><p>多库备份一般是不建议使用的，当需要恢复时只需要恢复其中一个或某几个库，比较不容易操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p -B --databases test_db test_db1 &gt; /backup/test_db_bak_$(date +%F).sql</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p -A -B &gt;/backup/all_bak_$(date +%F).sql</span><br></pre></td></tr></table></figure><h3 id="分库备份"><a href="#分库备份" class="headerlink" title="分库备份"></a>分库备份</h3><p>分库备份就是为了解决多库备份在同一个备份文件造成的问题。分库备份的实质也是针对单库进行备份。</p><p>这种备份方式在生产环境是比较常用的。一般分库备份会使用脚本，然后把脚本加入到定时任务中定期执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#This scripts is for auto backup mysql databases</span><br><span class="line">#Created by lichy at 2020/6/3</span><br><span class="line">MYSQL_CMD=/usr/bin/mysqldump</span><br><span class="line">MYSQL_USER=root</span><br><span class="line">MYSQL_PWD=**********</span><br><span class="line">DBname=`mysql -u$&#123;MYSQL_USER&#125; -p$&#123;MYSQL_PWD&#125; -e&quot;show databases;&quot;|sed &#x27;1,5d&#x27;`</span><br><span class="line">DATE=`date +%F`</span><br><span class="line">for DBname in $&#123;DBname&#125;</span><br><span class="line">do</span><br><span class="line">    $&#123;MYSQL_CMD&#125; -u$&#123;MYSQL_USER&#125; -p$&#123;MYSQL_PWD&#125; --compact -B $&#123;DBname&#125; | gzip &gt;/backup/$&#123;DBname&#125;_$&#123;DATE&#125;.sql.gz</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos backup]# ls</span><br><span class="line">fenku.sh  test1_2020-06-03.sql.gz  test_db_2020-06-03.sql.gz</span><br></pre></td></tr></table></figure><h2 id="表备份"><a href="#表备份" class="headerlink" title="表备份"></a>表备份</h2><h3 id="表备份-1"><a href="#表备份-1" class="headerlink" title="表备份"></a>表备份</h3><p>​    在生产环境中，对某个库的单表备份是常见的。这种备份方法易于及时恢复单表数据，而且可以在不影响其他表数据写入的情况下进行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p --databases test_db --tables table1 &gt;/backup/test_db_table1_$(date +%F).sql</span><br></pre></td></tr></table></figure><h3 id="表结构备份"><a href="#表结构备份" class="headerlink" title="表结构备份"></a>表结构备份</h3><p>​    备份表结构一般用于在不同的库用到相同的表的场景，能够省区建表的一些操作，特别适用于表字段较多时。备份表结构是备份建表的SQL语句，但不包括表里的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p --databases -d test_db --tables table1 &gt;/backup/test_db_table1_$(date +%F).sql</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@centos backup]# egrep -v &quot;#|\*|^$&quot; test_db_table1_2020-06-03.sql </span><br><span class="line">-- MySQL dump 10.13  Distrib 8.0.20, for Linux (x86_64)</span><br><span class="line">--</span><br><span class="line">-- Host: localhost    Database: test_db</span><br><span class="line">-- ------------------------------------------------------</span><br><span class="line">-- Server version8.0.20</span><br><span class="line">--</span><br><span class="line">-- Table structure for table `table1`</span><br><span class="line">--</span><br><span class="line">DROP TABLE IF EXISTS `table1`;</span><br><span class="line">CREATE TABLE `table1` (</span><br><span class="line">  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` char(20) NOT NULL,</span><br><span class="line">  `age` char(33) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;</span><br><span class="line">-- Dump completed on 2020-06-03  2:10:29</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="备份优化"><a href="#备份优化" class="headerlink" title="备份优化"></a>备份优化</h2><p>​    查看之前的备份文件结果，能够看得出对于用户来说会有一些信息是没有必要的。为了减少备份时输出的信息，提高备份效率，需要对备份操作进行一些优化。</p><h3 id="1-压缩备份"><a href="#1-压缩备份" class="headerlink" title="1. 压缩备份"></a>1. 压缩备份</h3><p>​    压缩备份是为了减少备份文件的大小，节约磁盘使用空间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p -A -B|gzip &gt;/backup/all_bak_$(date +%F).sql.gz</span><br></pre></td></tr></table></figure><h3 id="2-优化输出信息"><a href="#2-优化输出信息" class="headerlink" title="2. 优化输出信息"></a>2. 优化输出信息</h3><p>使用–compact参数可以优化输出信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p --compact --databases test_db &gt;/backup/test_db_bak_$(date +%F).sql</span><br></pre></td></tr></table></figure><h2 id="不同数据库引擎备份的注意事项"><a href="#不同数据库引擎备份的注意事项" class="headerlink" title="不同数据库引擎备份的注意事项"></a>不同数据库引擎备份的注意事项</h2><h3 id="1-MyISAM引擎"><a href="#1-MyISAM引擎" class="headerlink" title="1. MyISAM引擎"></a>1. MyISAM引擎</h3><p>​    由于MyISAM引擎为表级锁，因此，为了防止数据写入造成数据不一致的情况，需要在备份时使用“–lock-all-tables”参数进行锁表操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p --lock-all-tables --compact test_db|gzip &gt;/backup/test_db_bak_$(date +%F).sql.gz</span><br></pre></td></tr></table></figure><h3 id="2-InnoDB引擎"><a href="#2-InnoDB引擎" class="headerlink" title="2. InnoDB引擎"></a>2. InnoDB引擎</h3><p>​    由于InnoDB引擎为行锁，因此进行数据库备份时可以不对库执行锁操作，可以使用参数“–single-transaction”来保持数据一致性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p --single-transaction -B -A -F|gzip &gt;/backup/databak.$(date +%F).sql.gz</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql问题点总结</title>
      <link href="/2020/05/28/mysql%E9%97%AE%E9%A2%98%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2020/05/28/mysql%E9%97%AE%E9%A2%98%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-MySQL8-0授权用户出现报错："><a href="#1-MySQL8-0授权用户出现报错：" class="headerlink" title="1. MySQL8.0授权用户出现报错："></a>1. MySQL8.0授权用户出现报错：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on test_db.* to &#x27;testdb_user&#x27;@&#x27;localhost&#x27; identified by &#x27;Lcy5655648-&#x27;;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;identified by &#x27;Lcy5655648-&#x27;&#x27; at line 1</span><br></pre></td></tr></table></figure><blockquote><p>当使用 grant 权限列表 on 数据库 to ‘用户名’@’访问主机’ identified by ‘密码’; 时会出现”……near ‘identified by ‘密码” at line 1”这个错误，原因是：新版的mysql版本已经将创建账户和赋予权限的方式分开了</p></blockquote><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><blockquote><p>创建账户：create user ‘用户名‘@’主机’ identified by ‘密码’</p><p>赋予权限：grant 权限列表 on 数据库 to ‘用户名‘@’主机’;(修改权限时在后面加with grant option)</p></blockquote><h2 id="2-Mysql8-0修改密码报错"><a href="#2-Mysql8-0修改密码报错" class="headerlink" title="2.Mysql8.0修改密码报错"></a>2.Mysql8.0修改密码报错</h2><p>MySQL修改密码常用的三种方式，分别为：</p><h4 id="一、以明文方式修改密码"><a href="#一、以明文方式修改密码" class="headerlink" title="一、以明文方式修改密码"></a>一、以明文方式修改密码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot -p&#x27;oldPassword&#x27; password &#x27;NewPassword&#x27;</span><br></pre></td></tr></table></figure><h4 id="二、修改数据库字段值的方式修改密码"><a href="#二、修改数据库字段值的方式修改密码" class="headerlink" title="二、修改数据库字段值的方式修改密码"></a>二、修改数据库字段值的方式修改密码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">## mysql5.7版本以前</span><br><span class="line">update user set password = PASSWORD(&#x27;NewPassword&#x27;) where user = &#x27;root&#x27;;flush privileges;</span><br><span class="line">## mysql5.7版本及以后</span><br><span class="line">update user set authentication_string = PASSWORD(&#x27;NewPassword&#x27;) where user=&#x27;root&#x27;;flush privileges;</span><br></pre></td></tr></table></figure><h4 id="三、通过alert命令方式进行修改"><a href="#三、通过alert命令方式进行修改" class="headerlink" title="三、通过alert命令方式进行修改"></a>三、通过alert命令方式进行修改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user root@localhost identified by &#x27;NewPassword&#x27;;flush privileges;</span><br></pre></td></tr></table></figure><p>第二种方式在Mysql8.0以上的版本已经不适用。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识MyISAM</title>
      <link href="/2020/05/26/%E5%88%9D%E8%AF%86MyISAM/"/>
      <url>/2020/05/26/%E5%88%9D%E8%AF%86MyISAM/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MyISAM介绍"><a href="#MyISAM介绍" class="headerlink" title="MyISAM介绍"></a>MyISAM介绍</h2><p>MyISAM是Mysql5.5之前版本默认的存储引擎。既不支持事务，也不支持外键。但是在5.5之前的版本中，MyISAM在某些场景下相对InnoDB的访问速度有明显的优势。如果对于事务的完整性没有要求或者是以SELECT、INSERT为主的应用，可以使用MyISAM引擎来创建表。</p><p>每个MyISAM引擎创建的表在磁盘上存储为3个文件，文件名与表名一致。只是扩展名有所不同：</p><ul><li>.frm(存储表定义)</li><li>.MYD(MyData,存储数据)</li><li>.MYI(MyIndex,存储索引)</li></ul><p>此处可以做一些优化，可以将数据文件和索引文件分别放置在不同的目录，平均分布IO，以便获得更快的速度。</p><p>要指定索引文件和数据文件的路径需要在创建表的时候通过DATA DIRECTORY和INDEX DIRECTORY语句指定，但是文件路径需要写绝对路径，并且拥有访问权限。</p><h2 id="MyISAM使用"><a href="#MyISAM使用" class="headerlink" title="MyISAM使用"></a>MyISAM使用</h2><p>MyISAM类型的表提供了修复的工具，可以用CHECK TABLE语句来检查MyISAM表的健康，并用REPAIR TABLE语句修复一个损坏的MyISAM表。</p><p>MyISAM表支持三种不同的存储格式：</p><ul><li>静态（固定长度）表</li><li>动态表</li><li>压缩表</li></ul><p>静态表是默认的存储格式。静态表中的字段都是非变长字段，这样每个记录都是固定长度的，这种存储方式的优点是存储非常快，易于缓存，出现故障的时候容易恢复。缺点是占用空间通常要比动态表多。静态表的数据在存储时会按照列的宽度定义补足空格，但是在应用访问的时候并不会得到这些空格，这些空格在返回给应用之前已经删除掉了。</p><p>动态表中包含变长字段，记录不是固定长度的，这样存储的优点是占用空间相对较少，但是频繁的更新和删除记录会产生碎片，需要定期执行OPTIMIZA TABLE语句或myisamchk -r命令来改善性能，并且在出现故障时恢复相对困难。</p><p>压缩表由myisampack工具创建，占用非常小的磁盘空间，因为每个记录都是被单独压缩的，所以只有非常小的访问开支。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>explicit_defaults_for_timestamp参数</title>
      <link href="/2020/05/11/explicit-defaults-for-timestamp%E5%8F%82%E6%95%B0/"/>
      <url>/2020/05/11/explicit-defaults-for-timestamp%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>explicit_defaults_for_timestamp是MySQL5.6版本后引入的参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;explicit%&#x27;;</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| explicit_defaults_for_timestamp | ON    |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">1 row in set (0.28 sec)</span><br></pre></td></tr></table></figure><p>将该参数先修改为off：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set explicit_defaults_for_timestamp=off;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#x27;explicit%&#x27;;</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| explicit_defaults_for_timestamp | OFF   |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>当explicit_defaults_for_timestamp的值为off时，系统会给timestamp自动创建默认值CURRENT_TIMESTAMP（系统日期），并且设置了not null和on update CURRENT_TIMESTAMP属性。当插入一个NULL值时，表中会自动插入系统日期。</p><blockquote><p>注意：MySQL只给表中的第一个TIMESTAMP字段设置默认值为系统日期，如果有第二个TIMESTAMP类型，则默认值设置为0值。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table t3 ( id1 timestamp);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc t3;</span><br><span class="line">+-------+-----------+------+-----+-------------------+-----------------------------------------------+</span><br><span class="line">| Field | Type      | Null | Key | Default           | Extra                                         |</span><br><span class="line">+-------+-----------+------+-----+-------------------+-----------------------------------------------+</span><br><span class="line">| id1   | timestamp | NO   |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED on update CURRENT_TIMESTAMP |</span><br><span class="line">+-------+-----------+------+-----+-------------------+-----------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t3 values(null);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t3;</span><br><span class="line">+---------------------+</span><br><span class="line">| id1                 |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2020-05-11 10:07:40 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql入门小记录</title>
      <link href="/2020/05/09/mysql%E5%85%A5%E9%97%A8%E5%B0%8F%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/05/09/mysql%E5%85%A5%E9%97%A8%E5%B0%8F%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>查看表结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc emp;</span><br><span class="line">+----------+---------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type          | Null | Key | Default | Extra |</span><br><span class="line">+----------+---------------+------+-----+---------+-------+</span><br><span class="line">| ename    | varchar(10)   | YES  |     | NULL    |       |</span><br><span class="line">| hiredate | date          | YES  |     | NULL    |       |</span><br><span class="line">| sal      | decimal(10,2) | YES  |     | NULL    |       |</span><br><span class="line">| deptno   | int           | YES  |     | NULL    |       |</span><br><span class="line">+----------+---------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table emp \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: emp</span><br><span class="line">Create Table: CREATE TABLE `emp` (</span><br><span class="line">  `ename` varchar(10) DEFAULT NULL,</span><br><span class="line">  `hiredate` date DEFAULT NULL,</span><br><span class="line">  `sal` decimal(10,2) DEFAULT NULL,</span><br><span class="line">  `deptno` int DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>\G选项的含义是让记录能够按照字段竖向排列，以便更好的显示内容较长的记录。</p><ul><li>基本语法记录</li></ul><ol><li><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE DBNAME;</span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database dbname;</span><br></pre></td></tr></table></figure></li><li><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename(</span><br><span class="line">column_name_1 column_type_1 constraints,</span><br><span class="line">    name varchar(10),</span><br><span class="line">    number int(2)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE tablename;</span><br></pre></td></tr></table></figure></li><li><p>修改表</p><ol><li><p>修改表类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename MODIFY [COLUMN] column_definition [FIRST|AFTER col_name]</span><br><span class="line">alter table test modify name varchar(20);</span><br></pre></td></tr></table></figure></li><li><p>增加表字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD [COLUMN] column_definition [FIRST|AFTER col_name]</span><br><span class="line">alter table test add column age int(3);</span><br></pre></td></tr></table></figure></li><li><p>删除表字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename DROP [COLUMN] col_name</span><br><span class="line">alter table test drop column age;</span><br></pre></td></tr></table></figure></li><li><p>字段改名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename CHANGE [COLUMN] old_col_name column_definition[FIRST|AFTER col_name]</span><br><span class="line">alter table test change age age1 int(4);</span><br></pre></td></tr></table></figure><blockquote><p>change和modify都可以修改表的定义，区别载与change后面需要写两次列名，但是change的优点是可以修改列名称，modify不能。</p></blockquote></li><li><p>修改字段排列顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table test add birth date after name;</span><br><span class="line">alter table test modify age int(3) first;</span><br></pre></td></tr></table></figure><blockquote><p>ADD/CHANGE/MODIFY中都有可选项first和after column_name，这个选项可以用来修改字段在表中的位置，ADD增加的字段默认是加在表的最后的，而CHANGE和MODIFY默认不会改变字段的位置。</p></blockquote></li><li><p>更改表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename RENAME [TO] new_tablename</span><br><span class="line">alter table test rename test1;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>插入记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tablename(field1, field2,...,fieldn) VALUES(value1,value2,...,valuen);</span><br><span class="line">insert into test(name,age,number) values(&#x27;lcy&#x27;,22,1001);</span><br><span class="line">insert into test values(&#x27;lcy&#x27;,22,1001);</span><br></pre></td></tr></table></figure></li><li><p>更新记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE tablename SET field=value1,field2=value2,...,fieldn=valuen [WHERE CONDITION]</span><br><span class="line">update test set age=24 where name=&#x27;lcy&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>Mysql中update命令可以同时更新多个表中数据，语法如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t1,t2,...,tn set t1.field=value1,t2.field=value2,tn.fieldn=valuen [WHERE CONDITION]</span><br></pre></td></tr></table></figure></li><li><p>删除记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM tablename [WHERE CONDITION]</span><br><span class="line">delete from test where name=&#x27;lcy&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>在MySQL中可以一次删除多个表的数据，语法如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE t1,t2,...,tn From t1,t2,...,tn [WHERE CONDITION]</span><br></pre></td></tr></table></figure><blockquote><p>注意：from后面的表名如果使用别名，那么delete后面也要用相应的别名，否则会有语法错误</p></blockquote></li><li><p>查询记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tablename [WHERE CONDITION]</span><br></pre></td></tr></table></figure><ol><li><p>查询不重复的记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT distinct field FROM tablename [WHERE CONDITION]</span><br></pre></td></tr></table></figure></li><li><p>条件查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM test WHERE name=&#x27;lcy&#x27;</span><br></pre></td></tr></table></figure></li><li><p>排序和限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tablename [WHERE CONDITION][ORDER BY field1 [DESC|ASC],field2[DESC|ASC],...,fieldn[DESC|ASC]]</span><br></pre></td></tr></table></figure></li><li><p>聚合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT [field1,field2,...,fieldn] fun_name</span><br><span class="line">FROM tablename</span><br><span class="line">[WHERE where_contition]</span><br><span class="line">[GROUP BY field1,field2,...,fieldn</span><br><span class="line">[WITH ROLLUP]]</span><br><span class="line">[HAVING where_contition]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 要在emp表中统计公司总人数</span><br><span class="line">select count(1) from test;</span><br><span class="line"># 统计各个姓名的人数</span><br><span class="line">select name,count(1) from test group by name;</span><br><span class="line"># 统计各个姓名的人数和总人数</span><br><span class="line">select name,count(1) from test group by name with rollup;</span><br><span class="line"># 统计相同姓名人数大于1人的姓名</span><br><span class="line">select name,count(1) from test group by name having count(1)&gt;1;</span><br></pre></td></tr></table></figure></li><li><p>表连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select name, id from test1,test2 where test1.name=test2.name;</span><br><span class="line">select name, id from test1 left join test2 on test1.name=test2.name;</span><br><span class="line">select name, id from test1 right join test2 on test1.name=test2.name;</span><br></pre></td></tr></table></figure></li><li><p>子查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from test1 where name in(select name from test2);</span><br><span class="line"># 当子查询记录唯一时，可以用=代替in</span><br><span class="line">select * from test1 where name=(select name from test2);</span><br></pre></td></tr></table></figure></li><li><p>记录联合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t1</span><br><span class="line">UNION|UNION ALL</span><br><span class="line">SELECT * FROM T2</span><br><span class="line">...</span><br><span class="line">UNION|UNION ALL</span><br><span class="line">SELECT * FROM tn;</span><br></pre></td></tr></table></figure><blockquote><p>UNION 和UNION ALL 的主要区别时UNION ALL是把结果集直接合并在一起，而UNION是将UNION ALL后的结果进行一次DISTINCT，去除重复记录后的结果。</p></blockquote></li></ol></li><li><p>权限管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant select,insert on test.* to &#x27;lcy&#x27;@&#x27;localhost&#x27; identified by &#x27;123&#x27;;</span><br><span class="line">revoke insert on test.* from &#x27;lcy&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>帮助使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ? contents;</span><br><span class="line">You asked for help about help category: &quot;Contents&quot;</span><br><span class="line">For more information, type &#x27;help &lt;item&gt;&#x27;, where &lt;item&gt; is one of the following</span><br><span class="line">categories:</span><br><span class="line">   Account Management</span><br><span class="line">   Administration</span><br><span class="line">   Components</span><br><span class="line">   Compound Statements</span><br><span class="line">   Contents</span><br><span class="line">   Data Definition</span><br><span class="line">   Data Manipulation</span><br><span class="line">   Data Types</span><br><span class="line">   Functions</span><br><span class="line">   Geographic Features</span><br><span class="line">   Help Metadata</span><br><span class="line">   Language Structure</span><br><span class="line">   Plugins</span><br><span class="line">   Storage Engines</span><br><span class="line">   Table Maintenance</span><br><span class="line">   Transactions</span><br><span class="line">   User-Defined Functions</span><br><span class="line">   Utility</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ? data types</span><br><span class="line">You asked for help about help category: &quot;Data Types&quot;</span><br><span class="line">For more information, type &#x27;help &lt;item&gt;&#x27;, where &lt;item&gt; is one of the following</span><br><span class="line">topics:</span><br><span class="line">   AUTO_INCREMENT</span><br><span class="line">   BIGINT</span><br><span class="line">   BINARY</span><br><span class="line">   BIT</span><br><span class="line">   BLOB</span><br><span class="line">   BLOB DATA TYPE</span><br><span class="line">   BOOLEAN</span><br><span class="line">   CHAR</span><br><span class="line">   CHAR BYTE</span><br><span class="line">   DATE</span><br><span class="line">   DATETIME</span><br><span class="line">   DEC</span><br><span class="line">   DECIMAL</span><br><span class="line">   DOUBLE</span><br><span class="line">   DOUBLE PRECISION</span><br><span class="line">   ENUM</span><br><span class="line">   FLOAT</span><br><span class="line">   INT</span><br><span class="line">   INTEGER</span><br><span class="line">   LONGBLOB</span><br><span class="line">   LONGTEXT</span><br><span class="line">   MEDIUMBLOB</span><br><span class="line">   MEDIUMINT</span><br><span class="line">   MEDIUMTEXT</span><br><span class="line">   SET DATA TYPE</span><br><span class="line">   SMALLINT</span><br><span class="line">   TEXT</span><br><span class="line">   TIME</span><br><span class="line">   TIMESTAMP</span><br><span class="line">   TINYBLOB</span><br><span class="line">   TINYINT</span><br><span class="line">   TINYTEXT</span><br><span class="line">   VARBINARY</span><br><span class="line">   VARCHAR</span><br><span class="line">   YEAR DATA TYPE</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql通过rpm安装</title>
      <link href="/2020/05/09/mysql%E9%80%9A%E8%BF%87rpm%E5%AE%89%E8%A3%85/"/>
      <url>/2020/05/09/mysql%E9%80%9A%E8%BF%87rpm%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-1.el7.x86_64.rpm-bundle.tar">mysql-8.0.20-1.el7.x86_64.rpm-bundle下载链接</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mysql-8.0.20-1.el7.x86_64.rpm-bundle.tar.gz</span><br><span class="line"></span><br><span class="line">mysql-community-client-8.0.20-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-common-8.0.20-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-devel-8.0.20-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-compat-8.0.20-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-8.0.20-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-compat-8.0.20-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-server-8.0.20-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-test-8.0.20-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="卸载冲突的RPM组件"><a href="#卸载冲突的RPM组件" class="headerlink" title="卸载冲突的RPM组件"></a>卸载冲突的RPM组件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装mysql组件时出现的依赖错误</span></span><br><span class="line">[root@centos mysql]# rpm -ivh mysql-community-libs-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">warning: mysql-community-libs-8.0.20-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5:</span><br><span class="line">error: Failed dependencies:</span><br><span class="line">mariadb-libs is obsoleted by mysql-community-libs-8.0.20-1.el7.x86_64</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos mysql]# rpm -e mariadb-libs</span><br><span class="line">error: Failed dependencies:</span><br><span class="line">libmysqlclient.so.18()(64bit) is needed by (installed) postfix-2:2.10.1-6.el7.x86_64</span><br><span class="line">libmysqlclient.so.18(libmysqlclient_18)(64bit) is needed by (installed) postfix-2:2.10.1-6.el7.x86_64</span><br></pre></td></tr></table></figure><h3 id="查看postfix和mariadb-libs"><a href="#查看postfix和mariadb-libs" class="headerlink" title="查看postfix和mariadb-libs"></a>查看postfix和mariadb-libs</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos mysql]# rpm -qa | grep mariadb</span><br><span class="line">mariadb-libs-5.5.65-1.el7.x86_64</span><br><span class="line">[root@centos mysql]# rpm -qa | grep postfix</span><br><span class="line">postfix-2.10.1-6.el7.x86_64</span><br><span class="line">[root@centos mysql]# rpm -ev postfix-2.10.1-6.el7.x86_64</span><br><span class="line">Preparing packages...</span><br><span class="line">postfix-2:2.10.1-6.el7.x86_64</span><br><span class="line">[root@centos mysql]# rpm -ev mariadb-libs-5.5.65-1.el7.x86_64</span><br><span class="line">Preparing packages...</span><br><span class="line">mariadb-libs-1:5.5.65-1.el7.x86_64</span><br></pre></td></tr></table></figure><h2 id="安装mysql组件"><a href="#安装mysql组件" class="headerlink" title="安装mysql组件"></a>安装mysql组件</h2><blockquote><p>mysql-community-common-8.0.20-1.el7.x86_64.rpm<br>mysql-community-libs-8.0.20-1.el7.x86_64.rpm<br>mysql-community-libs-compat-8.0.20-1.el7.x86_64.rpm<br>mysql-community-client-8.0.20-1.el7.x86_64.rpm<br>mysql-community-server-8.0.20-1.el7.x86_64.rpm </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@centos mysql]# rpm -ivh mysql-community-common-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">warning: mysql-community-common-8.0.20-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:mysql-community-common-8.0.20-1.e################################# [100%]</span><br><span class="line">[root@centos mysql]# rpm -ivh mysql-community-libs-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">warning: mysql-community-libs-8.0.20-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:mysql-community-libs-8.0.20-1.el7################################# [100%]</span><br><span class="line">[root@centos mysql]# rpm -ivh mysql-community-libs-compat-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">warning: mysql-community-libs-compat-8.0.20-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:mysql-community-libs-compat-8.0.2################################# [100%]</span><br><span class="line">[root@centos mysql]# rpm -ivh mysql-community-client-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">warning: mysql-community-client-8.0.20-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:mysql-community-client-8.0.20-1.e################################# [100%]</span><br><span class="line">[root@centos mysql]# rpm -ivh mysql-community-server-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">warning: mysql-community-server-8.0.20-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:mysql-community-server-8.0.20-1.e################################# [100%]</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@centos mysql]# systemctl status mysqld</span><br><span class="line">● mysqld.service - MySQL Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2020-05-09 07:31:08 EDT; 6s ago</span><br><span class="line">     Docs: man:mysqld(8)</span><br><span class="line">           http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">  Process: 2073 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 2148 (mysqld)</span><br><span class="line">   Status: &quot;Server is operational&quot;</span><br><span class="line">   CGroup: /system.slice/mysqld.service</span><br><span class="line">           └─2148 /usr/sbin/mysqld</span><br><span class="line"></span><br><span class="line">May 09 07:31:02 centos systemd[1]: Starting MySQL Server...</span><br><span class="line">May 09 07:31:08 centos systemd[1]: Started MySQL Server.</span><br></pre></td></tr></table></figure><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>mysql5.7版本之后默认安装时去掉了root用户的空密码，初次启动mysql时，系统会产生一个临时root密码，可以通过/var/log/mysqld.log来查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos mysql]# grep password /var/log/mysqld.log </span><br><span class="line">2020-05-09T11:31:05.146749Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: *KL*Aq,ej1oC</span><br></pre></td></tr></table></figure><blockquote><p>我们的临时密码是: <strong>*KL*Aq,ej1oC</strong></p></blockquote><blockquote><p>数据库的密码需要满足以下条件：大小写字母，数字和特殊符号</p></blockquote><p>用临时密码登陆：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@centos mysql]# mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.20</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br></pre></td></tr></table></figure><p>临时密码登录无法进行大多数操作，比如想查看当前数据库列表，会提示如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br></pre></td></tr></table></figure><p>提示必须要更改初始密码，才可以执行此命令</p><h3 id="修改初始密码"><a href="#修改初始密码" class="headerlink" title="修改初始密码"></a>修改初始密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&quot;P@ssw0rd&quot;</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>新密码必须要满足密码强度规则，默认规则如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;validate_password%&#x27;;</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| Variable_name                        | Value  |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| validate_password.check_user_name    | ON     |</span><br><span class="line">| validate_password.dictionary_file    |        |</span><br><span class="line">| validate_password.length             | 8      |</span><br><span class="line">| validate_password.mixed_case_count   | 1      |</span><br><span class="line">| validate_password.number_count       | 1      |</span><br><span class="line">| validate_password.policy             | MEDIUM |</span><br><span class="line">| validate_password.special_char_count | 1      |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>RPM包安装简单，但是灵活性差，无法灵活选择版本，升级。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sc命令管理</title>
      <link href="/2020/04/28/sc%E5%91%BD%E4%BB%A4%E7%AE%A1%E7%90%86/"/>
      <url>/2020/04/28/sc%E5%91%BD%E4%BB%A4%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-命令介绍"><a href="#1-命令介绍" class="headerlink" title="1. 命令介绍"></a>1. 命令介绍</h2><blockquote><p>SC是用来与服务控制管理器和服务进行通信的命令行程序。它就可以帮助我们把一个普通程序创建成服务。使用sc可以测试和调试服务程序，可以设置存储在注册表中的服务属性，可以控制服务的启动方式，也可以启动和停止服务。SC命令可以做windows的“管理工具”中的“服务”里的所有工作，还可以做很多“服务”里面做不到的工作，是一个非常强大的命令。</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"> 用法：       </span><br><span class="line">        sc &lt;server&gt; [command] [service name] &lt;option1&gt; &lt;option2&gt;...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;server&gt; 选项的格式为 &quot;\\ServerName&quot;</span><br><span class="line">        可通过键入以下命令获取有关命令的更多帮助: &quot;sc [command]&quot;</span><br><span class="line">        命令:</span><br><span class="line">          query-----------查询服务的状态，</span><br><span class="line">                          或枚举服务类型的状态。</span><br><span class="line">          queryex---------查询服务的扩展状态，</span><br><span class="line">                          或枚举服务类型的状态。</span><br><span class="line">          <span class="built_in">start</span>-----------启动服务。</span><br><span class="line">          <span class="built_in">pause</span>-----------向服务发送 <span class="built_in">PAUSE</span> 控制请求。</span><br><span class="line">          interrogate-----向服务发送 INTERROGATE 控制请求。</span><br><span class="line">          continue--------向服务发送 CONTINUE 控制请求。</span><br><span class="line">          stop------------向服务发送 STOP 请求。</span><br><span class="line">          config----------更改服务的配置(永久)。</span><br><span class="line">          description-----更改服务的描述。</span><br><span class="line">          failure---------更改失败时服务执行的操作。</span><br><span class="line">          failureflag-----更改服务的失败操作标志。</span><br><span class="line">          sidtype---------更改服务的服务 SID 类型。</span><br><span class="line">          privs-----------更改服务的所需特权。</span><br><span class="line">          managedaccount--更改服务以将服务帐户密码</span><br><span class="line">                          标记为由 LSA 管理。</span><br><span class="line">          qc--------------查询服务的配置信息。</span><br><span class="line">          qdescription----查询服务的描述。</span><br><span class="line">          qfailure--------查询失败时服务执行的操作。</span><br><span class="line">          qfailureflag----查询服务的失败操作标志。</span><br><span class="line">          qsidtype--------查询服务的服务 SID 类型。</span><br><span class="line">          qprivs----------查询服务的所需特权。</span><br><span class="line">          qtriggerinfo----查询服务的触发器参数。</span><br><span class="line">          qpreferrednode--查询服务的首选 NUMA 节点。</span><br><span class="line">          qmanagedaccount-查询服务是否将帐户</span><br><span class="line">                          与 LSA 管理的密码结合使用。</span><br><span class="line">          qprotection-----查询服务的进程保护级别。</span><br><span class="line">          quserservice----查询用户服务模板的本地实例。</span><br><span class="line">          delete ----------(从注册表中)删除服务。</span><br><span class="line">          create----------创建服务(并将其添加到注册表中)。</span><br><span class="line">          control---------向服务发送控制。</span><br><span class="line">          sdshow----------显示服务的安全描述符。</span><br><span class="line">          sdset-----------设置服务的安全描述符。</span><br><span class="line">          showsid---------显示与任意名称对应的服务 SID 字符串。</span><br><span class="line">          triggerinfo-----配置服务的触发器参数。</span><br><span class="line">          preferrednode---设置服务的首选 NUMA 节点。</span><br><span class="line">          GetDisplayName--获取服务的 DisplayName。</span><br><span class="line">          GetKeyName------获取服务的 ServiceKeyName。</span><br><span class="line">          EnumDepend------枚举服务依赖关系。</span><br><span class="line"></span><br><span class="line">        以下命令不需要服务名称:</span><br><span class="line">        sc &lt;server&gt; &lt;command&gt; &lt;option&gt;</span><br><span class="line">          boot------------(ok | bad)指示是否应将上一次启动另存为</span><br><span class="line">                          最近一次已知的正确启动配置</span><br><span class="line">          Lock------------锁定服务数据库</span><br><span class="line">          QueryLock-------查询 SCManager 数据库的 LockStatus</span><br><span class="line">示例:</span><br><span class="line">        sc <span class="built_in">start</span> MyService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QUERY 和 QUERYEX 选项:</span><br><span class="line">        如果查询命令带服务名称，将返回</span><br><span class="line">        该服务的状态。其他选项不适合这种</span><br><span class="line">        情况。如果查询命令不带参数或</span><br><span class="line">        带下列选项之一，将枚举此服务。</span><br><span class="line">    <span class="built_in">type</span>=    要枚举的服务的类型(driver, service, userservice, all)</span><br><span class="line">             (默认 = service)</span><br><span class="line">    state=   要枚举的服务的状态 (inactive, all)</span><br><span class="line">             (默认 = active)</span><br><span class="line">    bufsize= 枚举缓冲区的大小(以字节计)</span><br><span class="line">             (默认 = <span class="number">4096</span>)</span><br><span class="line">    ri=      开始枚举的恢复索引号</span><br><span class="line">             (默认 = <span class="number">0</span>)</span><br><span class="line">    group=   要枚举的服务组</span><br><span class="line">             (默认 = all groups)</span><br><span class="line"></span><br><span class="line">语法示例</span><br><span class="line">sc query                - 枚举活动服务和驱动程序的状态</span><br><span class="line">sc query eventlog       - 显示 eventlog 服务的状态</span><br><span class="line">sc queryex eventlog     - 显示 eventlog 服务的扩展状态</span><br><span class="line">sc query <span class="built_in">type</span>= driver   - 仅枚举活动驱动程序</span><br><span class="line">sc query <span class="built_in">type</span>= service  - 仅枚举 Win32 服务</span><br><span class="line">sc query state= all     - 枚举所有服务和驱动程序</span><br><span class="line">sc query bufsize= <span class="number">50</span>    - 枚举缓冲区为 <span class="number">50</span> 字节</span><br><span class="line">sc query ri= <span class="number">14</span>         - 枚举时恢复索引 = <span class="number">14</span></span><br><span class="line">sc queryex group= &quot;&quot;    - 枚举不在组内的活动服务</span><br><span class="line">sc query <span class="built_in">type</span>= interact - 枚举所有不活动服务</span><br><span class="line">sc query <span class="built_in">type</span>= driver group= NDIS     - 枚举所有 NDIS 驱动程序</span><br></pre></td></tr></table></figure><h2 id="2-SC命令实战"><a href="#2-SC命令实战" class="headerlink" title="2.SC命令实战"></a>2.SC命令实战</h2><ol><li><p>创建服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sc create 服务名 binpath= &quot;程序路径&quot; start= auto displayname= &quot;显示服务名称&quot;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意： =后面必须有一个空格</strong></p></blockquote></li><li><p>修改服务启动类型</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sc config 服务名 <span class="built_in">start</span>= 服务启动类型</span><br><span class="line">服务启动类型：</span><br><span class="line">demand //手动</span><br><span class="line">auto   //自动</span><br><span class="line">disabled //禁用</span><br></pre></td></tr></table></figure></li><li><p>删除一个服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc delete 服务名</span><br></pre></td></tr></table></figure></li><li><p>查看服务配置信息</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc qc 服务名</span><br></pre></td></tr></table></figure></li><li><p>根据服务的显示名称获取服务名称</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc getkeyname 服务显示名称</span><br></pre></td></tr></table></figure></li><li><p>查找服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc query 服务名称</span><br><span class="line">sc queryex 服务名称</span><br></pre></td></tr></table></figure><blockquote><p>查找服务可以使用sc query和sc queryex，然后再通过sc来获取更详细的信息</p></blockquote></li><li><p>启停服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc start/stop 服务名称</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> cmd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初始Celery</title>
      <link href="/2020/04/24/%E5%88%9D%E5%A7%8BCelery/"/>
      <url>/2020/04/24/%E5%88%9D%E5%A7%8BCelery/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="故事的起源"><a href="#故事的起源" class="headerlink" title="故事的起源"></a>故事的起源</h2><p>因公司项目需要，开始了解一下Celery及Rabbitmq，今天先了解学习一下Celery，Rabbitmq回头会再写一篇博客继续介绍的，OK，回归正题~~~</p><h2 id="1-What-is-Celery"><a href="#1-What-is-Celery" class="headerlink" title="1 . What is Celery"></a>1 . What is Celery</h2><p>Celery是一个简单、灵活且可靠的，用于处理大量消息的分布式系统，并且提供了一整套用于操作此系统的工具。Celery是一款消息队列工具，用于处理实时数据以及任务调度。</p><h3 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h3><blockquote><p><a href="%22https://www.celerycn.io/%22">Celery中文手册</a></p></blockquote><blockquote><p><a href="%22https://docs.celeryproject.org/en/stable/%22">Celery官方文档</a></p></blockquote><h2 id="2-Celery的组成"><a href="#2-Celery的组成" class="headerlink" title="2. Celery的组成"></a>2. Celery的组成</h2><p>Celery的架构是由消息中间件（broker），任务执行单元（worker）和任务执行结果存储（backend)组成的。</p><p>Celery支持多种消息传输的方式，使用到的中间件有RabbitMQ、Redis、Amazon SQS。</p><p>Celery需要一个中间件来进行消息的接受和发送，一般这个中间件会以独立的服务形式出现，作为消息中间件。</p><p>Rabbit MQ的功能齐全，比较稳定且易于安装，所以在生产环境中是首选。Redis功能也比较全，但是如果突然停止运行的话，会造成数据丢失。此次我只是学习阶段做测试，就用Redis了。</p><h2 id="3-环境的准备"><a href="#3-环境的准备" class="headerlink" title="3.环境的准备"></a>3.环境的准备</h2><p>Redis的安装:  <a href="%22https://github.com/MSOpenTech/redis/releases%22">https://github.com/MSOpenTech/redis/releases</a></p><p>从git上下载Redis的安装包，然后各种下一步，直到安装完成。在安装路径下执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>就可以确定redis安装完成了。或者看下redis的服务状态是不是正常也行。</p><p>Celery的安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install celery</span><br></pre></td></tr></table></figure><h2 id="4-Celery版本Hello-World"><a href="#4-Celery版本Hello-World" class="headerlink" title="4.Celery版本Hello World"></a>4.Celery版本Hello World</h2><p>创建第一个Celery实例程序，把创建的Celery程序称为Celery应用或者App。</p><p>首先创建task.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#tasks.py</span><br><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line"># app = Celery(&#x27;tasks&#x27;, broker=&#x27;amqp://guest@localhost//&#x27;)</span><br><span class="line">app = Celery(&#x27;hello&#x27;, </span><br><span class="line">        broker=&#x27;redis://localhost:6379/0&#x27;)</span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def add(x,y):</span><br><span class="line">    return x+y&lt;/code&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>Celery（）方法详解：</p><p>第一个参数为当前模块的名称，只有在__main__模块中定义任务时才会产生名称。</p><p>第二个参数为中间件的链接URL，实例中使用的redis（Celery默认使用的是RabbitMQ）。</p><p>RabbitMQ可以写：amqp://localhost</p><p>Redis://localhost</p><p>创建一个名为add的任务。</p><h2 id="5-运行Celery-Worker服务"><a href="#5-运行Celery-Worker服务" class="headerlink" title="5. 运行Celery Worker服务"></a>5. 运行Celery Worker服务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A tasks worker --loglevel=info</span><br></pre></td></tr></table></figure><p>Celery可用命令的帮助文档：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">celery worker --help</span><br><span class="line">celery help</span><br></pre></td></tr></table></figure><h2 id="6-调用任务"><a href="#6-调用任务" class="headerlink" title="6. 调用任务"></a>6. 调用任务</h2><p>需要调用我们创建实例任务，可以通过delay()进行调用</p><p>delay()是apply_async()的快捷方法，可以更好的控制任务的执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from tasks import add</span><br><span class="line">add.delay(4,4)</span><br></pre></td></tr></table></figure><p>该任务已经有Worker开始处理，可以通过控制台输出的日志进行查看执行情况。</p><p>调用任务会返回一个AsyncResult的实例，用于检测任务的状态，等待任务完成获取返回值（如果任务失败了，会抛出异常）。默认此功能不开启，如果开启，需要配置Celery的结果后端。</p><h2 id="7-保存结果"><a href="#7-保存结果" class="headerlink" title="7.保存结果"></a>7.保存结果</h2><p>如果需要跟踪任务的状态，Celery需要将任务的状态信息存储在某个地方。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app = Celery(&#x27;hello&#x27;, </span><br><span class="line">        broker=&#x27;redis://localhost:6379/0&#x27;,</span><br><span class="line">        backend=&#x27;redis://localhost:6379/0&#x27;)</span><br></pre></td></tr></table></figure><p>backend参数就是保存结果后端的配置。</p><p>如果配置了结果后端，重新调用执行任务，会得到调用任务返回的AsyncResult实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = add.delay(4, 4)</span><br><span class="line">result.ready()                          #ready()可以检测是否已经处理完毕</span><br></pre></td></tr></table></figure><p>整个任务的执行过程是异步的，如果一直等待任务完成，会将异步调用转换为同步调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.get(timeout=1)</span><br></pre></td></tr></table></figure><p>如果任务出现异常，get()会引发异常，可以通过propagate参数进行覆盖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.get(propagate=False)</span><br></pre></td></tr></table></figure><p>如果任务出现异常，可以通过以下命令进行回溯：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.traceback</span><br></pre></td></tr></table></figure><h2 id="8-结束语"><a href="#8-结束语" class="headerlink" title="8.结束语"></a>8.结束语</h2><p>今天就先写这么多吧，回头再补了</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>robocopy差异备份</title>
      <link href="/2020/04/24/robocopy%E5%B7%AE%E5%BC%82%E5%A4%87%E4%BB%BD/"/>
      <url>/2020/04/24/robocopy%E5%B7%AE%E5%BC%82%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Robocopy.exe是微软在Windows server2003 Resource kit Tools里面提供的程序用来做备份的。<br>Microsoft Windows中内置的传统的“复制和粘贴”功能有一些局限性。它在执行简单的任务（将一个文档从一个目录移动到另一个目录等）时处理得还好，但缺乏 IT 专业人员在工作场所所需的高级功能。例如，复制和粘贴操作不包括任何高级复原功能，所以支持断点续传。通过Robocopy可以创建两个文件结构完成相同的镜像副本，而且还可以保留所有相关文件信息，包括日期和时间戳、安全访问控制列表（ACL）等更多内容。</p><h2 id="命令及参数详解"><a href="#命令及参数详解" class="headerlink" title="命令及参数详解"></a>命令及参数详解</h2><table><thead><tr><th>用法</th><th>ROBOCOPY source destination [file [file]…] [options]</th></tr></thead><tbody><tr><td>源</td><td>源目录(驱动器:\路径或\服务器\共享\路径）。</td></tr><tr><td>目标</td><td>目标目录(驱动器:\路径或\服务器\共享\路径）。</td></tr><tr><td>文件</td><td>要复制的文件(名称/通配符: 默认为 “<em>.</em>“）。</td></tr></tbody></table><p><strong>注意，robocopy复制特定文件时文件名列在后面，这是它与copy的一个区别<br>例如:copy E:\1.txt E:\A （复制E盘目录下1.txt文件到E盘A目录）<br>则写作:robocopy E:\1.txt E:\A 1.txt</strong></p><h3 id="重试选项"><a href="#重试选项" class="headerlink" title="重试选项:"></a>重试选项:</h3><table><thead><tr><th>参数</th><th>详解</th></tr></thead><tbody><tr><td>/R:n</td><td>失败副本的重试次数: 默认为 1 百万。</td></tr><tr><td>/W:n</td><td>两次重试间的等待时间: 默认为 30 秒。</td></tr><tr><td>/REG</td><td>将注册表中的 /R:n 和 /W:n 保存为默认设置。</td></tr><tr><td>/TBD</td><td>等待定义共享名称（重试错误 67）。</td></tr></tbody></table><h3 id="复制选项："><a href="#复制选项：" class="headerlink" title="复制选项："></a>复制选项：</h3><table><thead><tr><th>参数</th><th>详解</th></tr></thead><tbody><tr><td>/S</td><td>复制子目录，但不复制空的子目录。</td></tr><tr><td>/E</td><td>复制子目录，包括空的子目录。</td></tr><tr><td>/LEV:n</td><td>仅复制源目录树的前 n 层。</td></tr><tr><td>/Z</td><td>在可重新启动模式下复制文件。</td></tr><tr><td>/B</td><td>在备份模式下复制文件。</td></tr><tr><td>/ZB</td><td>使用可重新启动模式；如果拒绝访问，请使用备份模式。</td></tr><tr><td>/EFSRAW</td><td>在 EFS RAW 模式下复制所有加密的文件。</td></tr><tr><td>/COPY:复制标记</td><td>要复制的文件内容(默认为/COPY:DAT）。（复制标记: D=数据，A=属性，T=时间戳）。（S=安全=NTFS ACL，O=所有者信息，U=审核信息）。</td></tr><tr><td>/DCOPY:T</td><td>复制目录时间戳。</td></tr><tr><td>/SEC</td><td>复制具有安全性的文件(等同于/COPY:DATS）。</td></tr><tr><td>/COPYALL</td><td>复制所有文件信息(等同于/COPY:DATSOU）。</td></tr><tr><td>/NOCOPY</td><td>不复制任何文件信息(与/PURGE 一起使用生效）。</td></tr><tr><td>/SECFIX</td><td>修复所有文件的文件安全性，即使是跳过的文件。</td></tr><tr><td>/TIMFIX</td><td>修复所有文件的文件时间，即使是跳过的文件。</td></tr><tr><td>/PURGE</td><td>删除源中不再存在的目标文件/目录。</td></tr><tr><td>/MIR</td><td>镜像目录树(等同于/E 和/PURGE）。</td></tr><tr><td>/MOV</td><td>移动文件(复制后从源中删除）。</td></tr><tr><td>/MOVE</td><td>移动文件和目录(复制后从源中删除）。</td></tr><tr><td>/A+:[RASHCNET]</td><td>将给定的属性添加到复制文件。</td></tr><tr><td>/A-:[RASHCNET]</td><td>从复制文件中删除给定的属性。</td></tr><tr><td>/CREATE</td><td>仅创建目录树和长度为零的文件。</td></tr><tr><td>/FAT</td><td>仅使用 8.3 FAT 文件名创建目标文件。</td></tr><tr><td>/256</td><td>关闭超长路径(&gt; 256 字符）支持。</td></tr><tr><td>/MON:n</td><td>监视源；发现多于 n 个更改时再次运行。</td></tr><tr><td>/MOT:m</td><td>监视源；如果更改，在 m 分钟时间内再次运行。</td></tr><tr><td>/RH:hhmm-hhmm</td><td>运行小时数 - 可以启动新副本的时间。</td></tr><tr><td>/PF</td><td>以每个文件(而不是每个步骤）为基础检查运行小时数。</td></tr><tr><td>/IPG:n</td><td>程序包间的间距(ms），以释放低速线路上的带宽。</td></tr></tbody></table><h3 id="文件选择选项"><a href="#文件选择选项" class="headerlink" title="文件选择选项:"></a>文件选择选项:</h3><table><thead><tr><th>参数</th><th>详解</th></tr></thead><tbody><tr><td>/A</td><td>仅复制具有存档属性集的文件。</td></tr><tr><td>/M</td><td>仅复制具有存档属性的文件并重置存档属性。</td></tr><tr><td>/IA:[RASHCNETO]</td><td>仅包含具有任意给定属性集的文件。</td></tr><tr><td>/XA:[RASHCNETO]</td><td>排除具有任意给定属性集的文件。</td></tr><tr><td>/XF 文件[文件]…</td><td>排除与给定名称/路径/通配符匹配的文件。</td></tr><tr><td>/XD 目录[目录]…</td><td>排除与给定名称/路径匹配的目录。</td></tr><tr><td>/XC</td><td>排除已更改的文件。</td></tr><tr><td>/XN</td><td>排除较新的文件。</td></tr><tr><td>/XO</td><td>排除较旧的文件。</td></tr><tr><td>/XX</td><td>排除多余的文件和目录。</td></tr><tr><td>/XL</td><td>排除孤立的文件和目录。</td></tr><tr><td>/IS</td><td>包含相同文件。</td></tr><tr><td>/IT</td><td>包含已调整的文件。</td></tr><tr><td>/MAX:n</td><td>最大的文件大小 - 排除大于 n 字节的文件。</td></tr><tr><td>/MIN:n</td><td>最小的文件大小 - 排除小于 n 字节的文件。</td></tr><tr><td>/MAXAGE:n</td><td>最长的文件存在时间 - 排除早于 n 天/日期的文件。</td></tr><tr><td>/MINAGE:n</td><td>最短的文件存在时间 - 排除晚于 n 天/日期的文件。</td></tr><tr><td>/MAXLAD:n</td><td>最大的最后访问日期 - 排除自 n 以来未使用的文件。</td></tr><tr><td>/MINLAD:n</td><td>最小的最后访问日期 - 排除自 n 以来使用的文件。(If n &lt; 1900 then n = n days, else n = YYYYMMDD date)。</td></tr><tr><td>/XJ</td><td>排除接合点。(默认情况下通常包括)。</td></tr><tr><td>/FFT</td><td>假设 FAT 文件时间(2 秒粒度)。</td></tr><tr><td>/DST</td><td>弥补 1 小时的 DST 时间差。</td></tr><tr><td>/XJD</td><td>排除目录的接合点。</td></tr><tr><td>/XJF</td><td>排除文件的接合点。</td></tr></tbody></table><h3 id="日志记录选项"><a href="#日志记录选项" class="headerlink" title="日志记录选项:"></a>日志记录选项:</h3><table><thead><tr><th>参数</th><th>详解</th></tr></thead><tbody><tr><td>/L</td><td>仅列出 - 不复制、添加时间戳或删除任何文件。</td></tr><tr><td>/X</td><td>报告所有多余的文件，而不只是选中的文件。</td></tr><tr><td>/V</td><td>生成详细输出，同时显示跳过的文件。</td></tr><tr><td>/TS</td><td>在输出中包含源文件的时间戳。</td></tr><tr><td>/FP</td><td>在输出中包含文件的完整路径名称。</td></tr><tr><td>/BYTES</td><td>以字节打印大小。</td></tr><tr><td>/NS</td><td>无大小 - 不记录文件大小。</td></tr><tr><td>/NC</td><td>无类别 - 不记录文件类别。</td></tr><tr><td>/NFL</td><td>无文件列表 - 不记录文件名。</td></tr><tr><td>/NDL</td><td>无目录列表 - 不记录目录名称。</td></tr><tr><td>/NP</td><td>无进度 - 不显示已复制的百分比。</td></tr><tr><td>/ETA</td><td>显示复制文件的预期到达时间。</td></tr><tr><td>/LOG:文件</td><td>将状态输出到日志文件(覆盖现有日志)。</td></tr><tr><td>/LOG+:文件</td><td>将状态输出到日志文件(附加到现有日志中)。</td></tr><tr><td>/UNILOG:文件</td><td>以 UNICODE 方式将状态输出到日志文件(覆盖现有日志)。</td></tr><tr><td>/UNILOG+:文件</td><td>以 UNICODE 方式将状态输出到日志文件(附加到现有日志中)。</td></tr><tr><td>/TEE</td><td>输出到控制台窗口和日志文件。</td></tr><tr><td>/NJH</td><td>没有作业标头。</td></tr><tr><td>/NJS</td><td>没有作业摘要。</td></tr><tr><td>/UNICODE</td><td>以 UNICODE 方式输出状态。</td></tr></tbody></table><h3 id="作业选项："><a href="#作业选项：" class="headerlink" title="作业选项："></a>作业选项：</h3><table><thead><tr><th>参数</th><th>详解</th></tr></thead><tbody><tr><td>/JOB:作业名称</td><td>从命名的作业文件中提取参数。</td></tr><tr><td>/SAVE:作业名称</td><td>将参数保存到命名的作业文件</td></tr><tr><td>/QUIT</td><td>处理命令行后退出(以查看参数)。</td></tr><tr><td>/NOSD</td><td>未指定源目录。</td></tr><tr><td>/NODD</td><td>未指定目标目录。</td></tr><tr><td>/IF</td><td>包含以下文件。</td></tr><tr><td>/MT</td><td>启动多线程任务（默认8个线程，最大可设128个）。</td></tr></tbody></table><h3 id="NTFS权限跟着走"><a href="#NTFS权限跟着走" class="headerlink" title="NTFS权限跟着走"></a>NTFS权限跟着走</h3><p><strong>[实现效果]</strong><br>在使用Windows 2000、Windows XP时，在多用户使用一台电脑时或管理服务器时，经常要为文件夹指定用户访问和修改的权限（如图1，需要分区为NTFS）。不过，用一般的复制方式无法保留我们设置的权限，这在服务器备份时意味着我们得重新设置用户权限。不过，Robocopy可以让我们在复制文件的时候，将属性、用户权限、所有者都可以一并复制到目标文件夹中。</p><p><strong>[简单命令]</strong><br>　　robocopy d:\work e:\back /e /copyall<br><strong>[参数讲解]</strong><br>        /copyall等于/copy:datsou，表示将所有源文件夹的信息复制到目标文件夹中，其中D：文件数据，A：文件属性，T：时间信息，S：权限信息，O：所有者信息，U：审核信息。</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> backup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python装饰器详解</title>
      <link href="/2020/04/24/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/04/24/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>装饰器(Decorators)就是允许给一个现有对象添加新功能，但是又不改变它的结构的一种封装模式。这种类型的设计属于结构型模式，是作为现有类的一个包装。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>装饰器的本质是一个python函数，可以让其他函数方法在不需要做代码变动的前提下增加额外的功能，返回值也是一个函数对象。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="1-简单装饰器"><a href="#1-简单装饰器" class="headerlink" title="1. 简单装饰器"></a>1. 简单装饰器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">def deco(func):</span><br><span class="line">    def wrapper():</span><br><span class="line">        startTime = time.time()</span><br><span class="line">        func()</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        sumtime = (endTime - startTime)*1000</span><br><span class="line">        print(&quot;spend time %d ms&quot; %sumtime)</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@deco</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;start&quot;)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(&quot;end&quot;)</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 执行结果</span><br><span class="line">start</span><br><span class="line">end</span><br><span class="line">spend time 1025 ms</span><br></pre></td></tr></table></figure><p><strong>函数deco就是装饰器，它把真正执行业务的方法func包装在自己的函数里，看起来deco就是func附加的装饰一般，对func进行了扩展。</strong></p><h3 id="2-带参数的装饰器"><a href="#2-带参数的装饰器" class="headerlink" title="2.带参数的装饰器"></a>2.带参数的装饰器</h3><p>装饰器还可以带参数来进行修饰。类似于@decorator(a)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def use_timer(flag):</span><br><span class="line">    def decorator(func):</span><br><span class="line">        def wrapper(*args, **kwargs):</span><br><span class="line">            if flag == &quot;yes&quot;:</span><br><span class="line">                startTime = time.time()</span><br><span class="line">                func(*args)</span><br><span class="line">                endTime = time.time()</span><br><span class="line">                print(endTime-startTime)</span><br><span class="line">        return wrapper</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line">@use_timer(flag=&quot;yes&quot;)</span><br><span class="line">def main(name=&quot;timer&quot;):</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(&quot;i use the %s&quot; %name )</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 执行结果</span><br><span class="line">i use the timer</span><br><span class="line">1.0004322528839111</span><br></pre></td></tr></table></figure><p><strong>以上代码中的use_timer就是一个带参数的装饰器，通过对原有装饰器函数封装，返回一个装饰器。可以理解为main=use_time(“yes”)(func)</strong></p><h3 id="3-类装饰器"><a href="#3-类装饰器" class="headerlink" title="3.类装饰器"></a>3.类装饰器</h3><p>二话不说，先上代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">class Dec_Test(object):</span><br><span class="line">    def __init__(self, func):</span><br><span class="line">        self._func = func</span><br><span class="line"></span><br><span class="line">    def __call__(self):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        self._func()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(end_time-start_time)</span><br><span class="line"></span><br><span class="line">@Dec_Test</span><br><span class="line">def main():</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(&#x27;Test is success&#x27;)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><strong>类装饰器通过类内部的__call__方法来进行方法的回调</strong></p><h3 id="4-内置装饰器"><a href="#4-内置装饰器" class="headerlink" title="4.内置装饰器"></a>4.内置装饰器</h3><p>Python中常用内置装饰器有@property、@staticmethod、@classmethod<br>  <strong>@property</strong>：通过这一装饰器可以实现类中方法对外提供统一的调用，也就是实现get方法。<br>  <strong>@staticmethod</strong>：通过该装饰器可以将类中方法装饰为静态方法，静态方法就是不需要通过创建实例的情况下，可以通过类名直接进行调用，实现函数功能和实例解绑的效果。<br>  <strong>@classmethod</strong>：通过这一装饰器可以将类中方法定义为类方法。</p><h3 id="5-装饰器调用顺序"><a href="#5-装饰器调用顺序" class="headerlink" title="5.装饰器调用顺序"></a>5.装饰器调用顺序</h3><p>装饰器调用顺序按靠近函数的顺序进行执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@c</span><br><span class="line">@b</span><br><span class="line">@a</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;end&quot;)</span><br><span class="line">先调用a,然后是b，然后是c</span><br><span class="line">func = c(b(a(func))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象编程</title>
      <link href="/2020/04/23/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/04/23/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h3><p>通过以单下划线开头可以用来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">    self._name = name</span><br><span class="line">    self._age = age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改器 - setter方法</span></span><br><span class="line"><span class="meta">@age.setter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self, age</span>):</span></span><br><span class="line">    self._age = age</span><br></pre></td></tr></table></figure><h3 id="slots-限定对象绑定属性："><a href="#slots-限定对象绑定属性：" class="headerlink" title="__slots__限定对象绑定属性："></a>__slots__限定对象绑定属性：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 限定Person对象只能绑定_name, _age和_gender属性</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_name&#x27;</span>, <span class="string">&#x27;_age&#x27;</span>, <span class="string">&#x27;_gender&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self, age</span>):</span></span><br><span class="line">        self._age = age&lt;/code&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>@staticmethod 静态方法，可以通过类直接调用，不需要创建对象，不会隐式传递self</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a, b, c</span>):</span></span><br><span class="line">        self._a = a</span><br><span class="line">        self._b = b</span><br><span class="line">        self._c = c</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_valid</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">        <span class="keyword">return</span> a + b &gt; c <span class="keyword">and</span> b + c &gt; a <span class="keyword">and</span> a + c &gt; b</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perimeter</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._a + self._b + self._c</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">self</span>):</span></span><br><span class="line">        half = self.perimeter() / <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> sqrt(half * (half - self._a) *</span><br><span class="line">                    (half - self._b) * (half - self._c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    a, b, c = <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">    <span class="comment"># 静态方法和类方法都是通过给类发消息来调用的</span></span><br><span class="line">    <span class="keyword">if</span> Triangle.is_valid(a, b, c):</span><br><span class="line">        t = Triangle(a, b, c)</span><br><span class="line">        <span class="built_in">print</span>(t.perimeter())</span><br><span class="line">        <span class="comment"># 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数</span></span><br><span class="line">        <span class="comment"># print(Triangle.perimeter(t))</span></span><br><span class="line">        <span class="built_in">print</span>(t.area())</span><br><span class="line">        <span class="comment"># print(Triangle.area(t))</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;无法构成三角形.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>类方法的第一个参数约定名为cls，代表的是当前类的相关信息对象，通过这个参数可以获取和类相关的信息，并且创建出类的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, localtime, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span></span>):</span></span><br><span class="line">        self._hour = hour</span><br><span class="line">        self._minute = minute</span><br><span class="line">        self._second = second</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">now</span>(<span class="params">cls</span>):</span></span><br><span class="line">        ctime = localtime(time())</span><br><span class="line">        <span class="keyword">return</span> cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span></span><br><span class="line">        self._second += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second == <span class="number">60</span>:</span><br><span class="line">            self._second = <span class="number">0</span></span><br><span class="line">            self._minute += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute == <span class="number">60</span>:</span><br><span class="line">                self._minute = <span class="number">0</span></span><br><span class="line">                self._hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self._hour == <span class="number">24</span>:</span><br><span class="line">                    self._hour = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%02d:%02d:%02d&#x27;</span> % \</span><br><span class="line">               (self._hour, self._minute, self._second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 通过类方法创建对象并获取系统时间</span></span><br><span class="line">    clock = Clock.now()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(clock.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        clock.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>借鉴于：<a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/09.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6.md">“Python-100-Days”</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python操作redis</title>
      <link href="/2020/04/22/Python%E6%93%8D%E4%BD%9Credis/"/>
      <url>/2020/04/22/Python%E6%93%8D%E4%BD%9Credis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>安装python-redis：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure></li><li><p>新建一个文件比如redis_test.py，然后初始化一个redis实例变量，并且在ubuntu虚拟机中开启redis。比如虚拟机的ip地址为192.168.174.130。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从redis包中导入Redis类</span></span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="comment"># 初始化redis实例变量</span></span><br><span class="line">xtredis = Redis(host=<span class="string">&#x27;192.168.174.130&#x27;</span>,port=<span class="number">6379</span>)&lt;/code&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure></li><li><p>对字符串的操作：操作redis的方法名称，跟之前使用redis-cli一样，现就一些常用的来做个简单介绍，示例代码如下(承接以上的代码)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个值进去，并且设置过期时间为60秒，如果不设置，则永远不会过期</span></span><br><span class="line"> xtredis.<span class="built_in">set</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;xiaotuo&#x27;</span>,ex=<span class="number">60</span>)</span><br><span class="line"> <span class="comment"># 获取一个值</span></span><br><span class="line"> xtredis.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"> <span class="comment"># 删除一个值</span></span><br><span class="line"> xtredis.delete(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"> <span class="comment"># 给某个值自增1</span></span><br><span class="line"> xtredis.<span class="built_in">set</span>(<span class="string">&#x27;read_count&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"> xtredis.incr(<span class="string">&#x27;read_count&#x27;</span>)  <span class="comment"># 这时候read_count变为2</span></span><br><span class="line"> <span class="comment"># 给某个值减少1</span></span><br><span class="line"> xtredis.decr(<span class="string">&#x27;read_count&#x27;</span>) <span class="comment"># 这时候read_count变为1</span></span><br></pre></td></tr></table></figure></li><li><p>对列表的操作：同字符串操作，所有方法的名称跟使用redis-cli操作是一样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给languages这个列表往左边添加一个python</span></span><br><span class="line"> xtredis.lpush(<span class="string">&#x27;languages&#x27;</span>,<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"> <span class="comment"># 给languages这个列表往左边添加一个php</span></span><br><span class="line"> xtredis.lpush(<span class="string">&#x27;languages&#x27;</span>,<span class="string">&#x27;php&#x27;</span>)</span><br><span class="line"> <span class="comment"># 给languages这个列表往左边添加一个javascript</span></span><br><span class="line"> xtredis.lpush(<span class="string">&#x27;languages&#x27;</span>,<span class="string">&#x27;javascript&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 获取languages这个列表中的所有值</span></span><br><span class="line"> <span class="built_in">print</span> xtredis.lrange(<span class="string">&#x27;languages&#x27;</span>,<span class="number">0</span>,-<span class="number">1</span>)</span><br><span class="line"> [<span class="string">&#x27;javascript&#x27;</span>,<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;python&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>对集合的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给集合team添加一个元素xiaotuo</span></span><br><span class="line"> xtredis.sadd(<span class="string">&#x27;team&#x27;</span>,<span class="string">&#x27;xiaotuo&#x27;</span>)</span><br><span class="line"> <span class="comment"># 给集合team添加一个元素datuo</span></span><br><span class="line"> xtredis.sadd(<span class="string">&#x27;team&#x27;</span>,<span class="string">&#x27;datuo&#x27;</span>)</span><br><span class="line"> <span class="comment"># 给集合team添加一个元素slice</span></span><br><span class="line"> xtredis.sadd(<span class="string">&#x27;team&#x27;</span>,<span class="string">&#x27;slice&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 获取集合中的所有元素</span></span><br><span class="line"> xtredis.smembers(<span class="string">&#x27;team&#x27;</span>)</span><br><span class="line"> &gt; [<span class="string">&#x27;datuo&#x27;</span>,<span class="string">&#x27;xiaotuo&#x27;</span>,<span class="string">&#x27;slice&#x27;</span>] <span class="comment"># 无序的</span></span><br></pre></td></tr></table></figure></li><li><p>对哈希(hash)的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给website这个哈希中添加baidu</span></span><br><span class="line"> xtredis.hset(<span class="string">&#x27;website&#x27;</span>,<span class="string">&#x27;baidu&#x27;</span>,<span class="string">&#x27;baidu.com&#x27;</span>)</span><br><span class="line"> <span class="comment"># 给website这个哈希中添加google</span></span><br><span class="line"> xtredis.hset(<span class="string">&#x27;website&#x27;</span>,<span class="string">&#x27;google&#x27;</span>,<span class="string">&#x27;google.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 获取website这个哈希中的所有值</span></span><br><span class="line"> <span class="built_in">print</span> xtredis.hgetall(<span class="string">&#x27;website&#x27;</span>)</span><br><span class="line"> &gt; &#123;<span class="string">&quot;baidu&quot;</span>:<span class="string">&quot;baidu.com&quot;</span>,<span class="string">&quot;google&quot;</span>:<span class="string">&quot;google.com&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>事务(管道)操作：redis支持事务操作，也即一些操作只有统一完成，才能算完成。否则都执行失败，用python操作redis也是非常简单，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个管道实例</span></span><br><span class="line"> pip = xtredis.pipeline()</span><br><span class="line"> <span class="comment"># 做第一步操作，给BankA自增长1</span></span><br><span class="line"> pip.incr(<span class="string">&#x27;BankA&#x27;</span>)</span><br><span class="line"> <span class="comment"># 做第二步操作，给BankB自减少1</span></span><br><span class="line"> pip.desc(<span class="string">&#x27;BankB&#x27;</span>)</span><br><span class="line"> <span class="comment"># 执行事务</span></span><br><span class="line"> pip.execute()</span><br></pre></td></tr></table></figure><p>以上便展示了python-redis的一些常用方法，如果想深入了解其他的方法，可以参考python-redis的源代码（查看源代码pycharm快捷键提示：把鼠标光标放在import Redis的Redis上，然后按ctrl+b即可进入）。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>procsyskernelhung_task_timeout_secs故障报错</title>
      <link href="/2020/04/22/procsyskernelhung-task-timeout-secs%E6%95%85%E9%9A%9C%E6%8A%A5%E9%94%99/"/>
      <url>/2020/04/22/procsyskernelhung-task-timeout-secs%E6%95%85%E9%9A%9C%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="报错如下"><a href="#报错如下" class="headerlink" title="报错如下"></a>报错如下</h2><p><img src="/img/error.jpg" alt="error"><br>问题原因：<br>默认情况下， Linux会最多使用40%的可用内存作为文件系统缓存。当超过这个阈值后，文件系统会把将缓存中的内存全部写入磁盘， 导致后续的IO请求都是同步的。</p><p>将缓存写入磁盘时，有一个默认120秒的超时时间。 出现上面的问题的原因是IO子系统的处理速度不够快，不能在120秒将缓存中的数据全部写入磁盘。</p><p>IO系统响应缓慢，导致越来越多的请求堆积，最终系统内存全部被占用，导致系统失去响应。</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>根据应用程序情况，对vm.dirty_ratio，vm.dirty_background_ratio两个参数进行调优设置。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django与Python版本对应关系</title>
      <link href="/2020/04/22/Django%E4%B8%8EPython%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/"/>
      <url>/2020/04/22/Django%E4%B8%8EPython%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Django 1.11需要Python 2.7或Python 3.4以上的版本；Django 2.0需要Python 3.4以上的版本；Django 2.1需要Python 3.5以上的版本。</strong></p><table><thead><tr><th>Django版本</th><th>Python版本</th></tr></thead><tbody><tr><td>1.8</td><td>2.7、3.2、3.3、3.4、3.5</td></tr><tr><td>1.9、1.10</td><td>2.7、3.4、3.5</td></tr><tr><td>1.11</td><td>2.7、3.4、3.5、3.6、3.7</td></tr><tr><td>2.0</td><td>3.4、3.5、3.6、3.7</td></tr><tr><td>2.1、2.2</td><td>3.5、3.6、3.7</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD域账号操作</title>
      <link href="/2020/04/22/CMD%E5%9F%9F%E8%B4%A6%E5%8F%B7%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/04/22/CMD%E5%9F%9F%E8%B4%A6%E5%8F%B7%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>偶尔会有不方便登陆域控的情况，那么除了使用授权管理活动目录、mmc添加控制台外，还有在本地域环境下通过DOS命令管理。</p><h3 id="实例命令"><a href="#实例命令" class="headerlink" title="实例命令"></a>实例命令</h3><ol><li>查看域用户状态：net user /domain username</li><li>新增域用户：net user /domain /add username1 username2</li><li>删除域用户：net user /domain /del username1</li><li>修改域用户密码：net user /domain username password</li><li>启用域用户：net user /domain username active:yes</li><li>禁用域用户：net user /domain username active:no</li><li>查看域中所有用户：net user /domain</li><li>查询域名称：net view /domain</li><li>查询域控制器：net time /domain</li><li>查询所有域控制器：dsquery server</li></ol><h3 id="详解："><a href="#详解：" class="headerlink" title="详解："></a>详解：</h3><ol><li>username：用户账号名</li><li>password：用户账户的密码</li><li>/domain：计算机所在域</li><li>/add：将用户账号添加到用户账号的数据库</li><li>/delete：从用户账号数据库种删除该用户</li><li>active:{no|yes}：启用或禁止用户账号</li><li>/expires:{date|never}：设置用户账号过期时间</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> windows运维 </category>
          
          <category> cmd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
            <tag> windows运维 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
